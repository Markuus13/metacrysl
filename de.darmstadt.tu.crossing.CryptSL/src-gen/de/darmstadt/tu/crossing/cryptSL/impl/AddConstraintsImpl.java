/**
 * generated by Xtext 2.20.0
 */
package de.darmstadt.tu.crossing.cryptSL.impl;

import de.darmstadt.tu.crossing.cryptSL.AddConstraint;
import de.darmstadt.tu.crossing.cryptSL.AddConstraints;
import de.darmstadt.tu.crossing.cryptSL.CryptSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Add Constraints</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.AddConstraintsImpl#getAddConstraints <em>Add Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AddConstraintsImpl extends MinimalEObjectImpl.Container implements AddConstraints
{
  /**
   * The cached value of the '{@link #getAddConstraints() <em>Add Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddConstraints()
   * @generated
   * @ordered
   */
  protected EList<AddConstraint> addConstraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AddConstraintsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CryptSLPackage.Literals.ADD_CONSTRAINTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AddConstraint> getAddConstraints()
  {
    if (addConstraints == null)
    {
      addConstraints = new EObjectContainmentEList<AddConstraint>(AddConstraint.class, this, CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS);
    }
    return addConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS:
        return ((InternalEList<?>)getAddConstraints()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS:
        return getAddConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS:
        getAddConstraints().clear();
        getAddConstraints().addAll((Collection<? extends AddConstraint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS:
        getAddConstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CryptSLPackage.ADD_CONSTRAINTS__ADD_CONSTRAINTS:
        return addConstraints != null && !addConstraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AddConstraintsImpl
